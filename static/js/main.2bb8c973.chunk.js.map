{"version":3,"sources":["Rental/components/Image.js","Rental/components/RentalDetail.js","Rental/components/Rating.js","Rental/Rental.js","Rentals.js","ShoppingCart.js","App.js","serviceWorker.js","index.js"],"names":["Image","className","src","this","props","rental","image","alt","title","height","width","React","Component","RentalDetail","houseType","location","city","Rating","rating","stars","reviews","host","isSuperhost","Rental","onClick","payment","cost","description","idx","buttonText","Rentals","rentalList","rentals","map","index","key","onBookRental","ShoppingCart","totalCost","parseInt","onDeleteRental","length","id","role","aria-label","App","state","airbnbs","selectedRentals","bookRental","selectedRental","includes","alert","setState","prevState","deleteRental","splice","console","log","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bb8c973.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Image extends React.Component {\n  static propTypes = {\n    rental: PropTypes.object.isRequired,\n  }\n\n    render() {\n      return (\n        <img className = \"image\"\n           src={this.props.rental.image} \n          alt={this.props.rental.title}\n          height=\"200\"\n          width=\"200\" \n        />\n        \n      )\n    }\n  }\n\n  export default Image;","//  - housetype\n//  - location city\n\nimport React from 'react';\nimport './RentalDetail.css'\nimport PropTypes from 'prop-types';\n\nclass RentalDetail extends React.Component {\n  static propTypes = {\n    rental: PropTypes.object.isRequired,\n  }\n\n    render() {\n\n      return (\n        <div className = \"rental-detail\">\n          <p className=\"house-type\">\n            {this.props.rental.houseType}\n            &nbsp; &#8226; &nbsp; \n            {this.props.rental.location.city}\n          </p>\n        </div>\n      );\n    }\n\n  }\n  export default RentalDetail;","//  - rating stars\n//  - rating reviews\n//  - is Superhost\n\nimport React from 'react';\nimport './Rating.css'\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  static propTypes = {\n    rental: PropTypes.object.isRequired,\n  }\n\n    render() {\n\n      return (\n        <div className = \"rating-info\">\n          <p className=\"stars\">\n            {this.props.rental.rating.stars} stars\n         </p>\n         <p className=\"reviews\">\n            &nbsp;\n            {this.props.rental.rating.reviews} reviews\n          </p>\n          <div className={\"superhost\"}>\n            { //Check if host has superHost\n                        (this.props.rental.host.isSuperhost )\n                            ? <div> \n                                &nbsp; &#8226; &nbsp; Superhost\n                              </div> \n                            : \"\"\n                }\n          </div>\n        </div>\n      );\n    }\n\n  }\n  export default Rating;","import React from 'react';\nimport Image from './components/Image.js';\nimport RentalDetail from './components/RentalDetail.js';\nimport Rating from './components/Rating.js';\n\nimport './Rental.css'\nimport './components/RentalDetail.css'\nimport './components/Rating.css'\n\nimport PropTypes from 'prop-types';\n\nclass Rental extends React.Component {\n    static propTypes = {\n        rental: PropTypes.object.isRequired,\n        // key: PropTypes.number.isRequired,\n        idx: PropTypes.number.isRequired,\n        onClick: PropTypes.func.isRequired,\n        buttonText: PropTypes.string.isRequired,\n    }\n    // const type = this.props.type;\n    // console.log(this.props.type);\n    render() {\n        const onClick = this.props.onClick;\n\n      return (\n        <li className='rental' >\n            <Image className=\"image\" rental={this.props.rental}/>\n\n            <div className=\"rental-info\"\n            >\n                <RentalDetail rental={this.props.rental} />\n\n                <h3 className='title'>\n                    {this.props.rental.title}\n                </h3>\n                <div className=\"payment\">\n                    $ {this.props.rental.payment.cost} per night\n                    { //Check if payment has description\n                        (this.props.rental.payment.description !== \"\" )\n                            ? <p> \n                                &nbsp; &#8226; &nbsp; {this.props.rental.payment.description} \n                              </p> \n                            : \"\"\n                } </div>\n\n                <Rating className=\"payment\" rental={this.props.rental} />\n                <button onClick={() => onClick(this.props.idx)}>\n                    {this.props.buttonText}</button>\n            </div>\n        </li>\n  \n      )\n    }\n  }\n //\n//   \n\n  export default Rental;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Rental from './Rental/Rental.js';\nimport PropTypes from 'prop-types';\n\nclass Rentals extends React.Component {\n  static propTypes = {\n    rentals: PropTypes.array.isRequired,\n    onBookRental: PropTypes.func.isRequired\n  }\n  render () {\n    const rentalList = this.props.rentals\n      .map((rental, index) => {\n          return (\n            <Rental  className=\"\"\n              rental={rental} \n              key = {index}\n              idx = {index}\n              onClick={this.props.onBookRental}\n              buttonText=\"Book\"\n            />\n          );\n      });  \n    return (\n      <div className=\"\">\n          <ul className='rentals'>\n              {rentalList}\n          </ul>\n      </div>\n    );\n  }\n}\n\n\nexport default Rentals;\n","import React from 'react';\nimport './App.css';\nimport Rental from './Rental/Rental.js';\nimport PropTypes from 'prop-types';\n\n\nclass ShoppingCart extends React.Component {\n    static propTypes = {\n        rentals: PropTypes.array.isRequired,\n        onDeleteRental: PropTypes.func.isRequired\n      }\n    \n    render() {\n        let totalCost = 0;\n        const rentalList = this.props.rentals\n            .map((rental, idx) => {\n                totalCost += parseInt(rental.payment.cost);\n                return (\n                        <Rental  className=\"shopping-rental\"\n                            rental={rental} \n                            key = {idx}\n                            idx = {idx}\n                            onClick={this.props.onDeleteRental}\n                            buttonText=\"Delete\"\n                        />\n\n                );\n            });\n\n        return (\n            (rentalList.length > 0 )\n            ? <div className=\"shopping-div\">\n                <h2 id=\"cart-title\"> Currently in your cart</h2>\n\n                <aside className='shopping-cart' >\n                    <span role=\"img\" aria-label=\"shopping cart\">&#128722;</span> ${totalCost} total\n                </aside>\n                <ul className={'shopping-rentals'}>\n                    {rentalList}\n                </ul>\n            </div>\n            : null\n        \n                \n        );\n    }\n}\n\nexport default ShoppingCart;","import React from 'react';\n// import logo from './logo.svg';\nimport airbnbs from './airbnbs.json';\nimport './App.css';\nimport Rentals from './Rentals.js';\nimport ShoppingCart from './ShoppingCart.js';\n\nclass App extends React.Component {\n  state = {\n    rentals: airbnbs,\n    selectedRentals: []\n  }\n\n  bookRental = (idx) => {\n    const selectedRental = this.state.rentals[idx];\n    if (this.state.selectedRentals.includes(selectedRental)) {\n      alert('You already selected that rental.');\n      return;\n    }\n    \n    this.setState(prevState => {\n      return {\n        selectedRentals: [...prevState.selectedRentals, selectedRental]\n      };\n    });\n  }\n\n  deleteRental = (idx) => {    \n    this.setState(prevState => {\n      const selectedRentals = [...prevState.selectedRentals];\n      selectedRentals.splice(idx, 1);\n      console.log(this.state.selectedRentals);\n      console.log(this.state.rentals);\n      return {\n        selectedRentals\n      };\n    });\n  }\n\n  render () {\n    console.log({airbnbs});\n    console.log(airbnbs);\n    console.log([airbnbs])\n\n    console.log(this.state.selectedRentals);\n    return(\n      <div className=\"App\">\n        <ShoppingCart\n          rentals={this.state.selectedRentals}\n          onDeleteRental={this.deleteRental}\n        />\n          <hr />\n        <h2 id=\"rentals-title\"> Homes around the world</h2>\n        <Rentals\n          rentals={this.state.rentals}\n          onBookRental={this.bookRental}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}